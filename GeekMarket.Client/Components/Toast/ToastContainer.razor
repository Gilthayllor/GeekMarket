@using GeekMarket.Client.Services.Interfaces

<div class="container">
    @foreach (ToastItem toast in _toasts)
    {
        <Toast @key="toast.Id" Title="@toast.Title" Type="@toast.ToastType" Content="@toast.Content"
               IsVisible="toast.IsVisible" OnClose="() => HandleToastClose(toast)" />
    }
</div>

@code {
    [Inject]
    IToastService ToastService { get; set; } = null!;

    private List<ToastItem> _toasts = new();

    protected override void OnInitialized()
    {
        ToastService.OnToastListChanged += ListToastsUpdated;

        base.OnInitialized();
    }

    private async void ListToastsUpdated(object? sender, EventArgs e)
    {
        _toasts = ToastService.Toasts.ToList();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ToastService.OnToastListChanged -= ListToastsUpdated;
    }

    private async void HandleToastClose(ToastItem? toastToClose)
    {
        if (toastToClose != null)
        {
            toastToClose.IsVisible = false;
            StateHasChanged();

            await Task.Delay(300);

            ToastService.RemoveToast(toastToClose);
        }


    }
}