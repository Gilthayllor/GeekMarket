@page "/products"
@inject IProductService _productService
@inject IDialogService _dialogService
@inject ISnackbar _snackBar
@inject IFileConverter _fileConverter;

<MudContainer>
    <MudTable Items="_products" Context="product" Hover Loading="_loadingProducts" Striped Breakpoint="Breakpoint.None" Elevation="0">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Produtos</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>Descrição</MudTh>
            <MudTh>Preço</MudTh>
            <MudTh>Quantidade</MudTh>
            <MudTh>Imagem</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@product.Name</MudTd>
            <MudTd>@product.Description</MudTd>
            <MudTd>@product.Price</MudTd>
            <MudTd>@product.Quantity</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Image"></MudIconButton>
            </MudTd>
            <MudTd>
                <MudTooltip Text="Editar Produto" Delay="650">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => HandleEditProductClick(product)" />
                </MudTooltip>
                <MudTooltip Text="Excluir Produto" Delay="650">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => HandleDeleteProductClick(product.Id)" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<ProductDTO> _products = new List<ProductDTO>();

    private bool _loadingProducts;
    private bool _editProductDialogVisible;
    private DialogOptions _dialogOptions = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseOnEscapeKey = true
            };

    private ProductEditDTO _editProductDTO = null!;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts(true);
    }

    private async Task GetProducts(bool featured)
    {
        _loadingProducts = true;

        var result = await _productService.GetAll(featured);

        if (result.IsSuccess)
        {
            _products = result.Data.ToList();
        }

        _loadingProducts = false;
    }

    private async Task HandleDeleteProductClick(Guid id)
    {
        var parameters = new DialogParameters<DeleteConfirmationDialog>();
        parameters.Add(x => x.Content, "Tem certeza que deseja excluir o produto?");
        parameters.Add(x => x.ConfirmButtonText, "Excluir");
        parameters.Add(x => x.ConfirmButtonColor, Color.Error);

        var dialogResult = await _dialogService.Show<DeleteConfirmationDialog>("Excluir produto", parameters).Result;

        if (!dialogResult.Canceled)
        {
            var result = await _productService.DeleteProduct(id.ToString());

            if (result.IsSuccess)
            {
                AddSnackBar(Severity.Success, "Produto excluído com sucesso!");
                RemoveProduct(id);

                return;
            }

            AddSnackBar(Severity.Error, "Erro ao excluir produto!", "Teste de mensagem de erro..sdasda..dasd...dad");
        }
    }

    private async Task HandleEditProductClick(ProductDTO product)
    {
        _editProductDTO = product.ToEdit();

        var parameters = new DialogParameters<EditProductDialog>();
        parameters.Add(x => x.ProductEdit, _editProductDTO);

        var dialogResult = await _dialogService.Show<EditProductDialog>("Edit", parameters, _dialogOptions).Result;

        if (!dialogResult.Canceled)
        {
            _snackBar.Add("Editar");
        }
    }

    private void AddSnackBar(Severity severity, string message)
    {
        _snackBar.Add(message, severity);
    }

    private void AddSnackBar(Severity severity, string title, string message)
    {
        _snackBar.Add
        (
    @<div>
        <span>@title</span>
        <p>@message</p>
    </div>
    ,
    severity
        );
    }

    private void RemoveProduct(Guid id)
    {
        var product = _products.FirstOrDefault(x => x.Id == id);

        if (product != null)
            _products.Remove(product);
    }
}
